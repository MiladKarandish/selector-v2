class c{constructor({container:t,canvas:i,colors:s,lineWidth:h,resizersSize:e,x:o,y:r,width:n,height:a}){this.container=t,this.styles(this.container,{touchAction:"none",position:"relative"}),this.containerInfo=t.getBoundingClientRect(),this.canvas=i||document.createElement("canvas"),this.styles(this.canvas,{position:"absolute",top:0,right:0,zIndex:100,display:"block"}),i||this.container.appendChild(this.canvas),this.c=this.canvas.getContext("2d"),this.width=n||this.containerInfo.width/2,this.height=a||this.containerInfo.height/2,this.x=o||this.containerInfo.width/2-this.width/2,this.y=r||this.containerInfo.height/2-this.height/2,this.drawing=!1,this.pointSize=e||5,this.resizers={},this.selectedResizer=null,this.sides=["tl","ct","tr","cl","cr","bl","cb","br"],this.mouseDown=this.mouseDown.bind(this),this.mouseUp=this.mouseUp.bind(this),this.mouseMove=this.mouseMove.bind(this),this.resize=this.resize.bind(this),this.hoverCursor=this.hoverCursor.bind(this),this.offset={x:0,y:0},this.position={x:this.x,y:this.y},this.ratio=null,this.callback=null,this.canvas.width=this.containerInfo.width,this.canvas.height=this.containerInfo.height,this.cursors={tl:"se-resize",tr:"sw-resize",bl:"ne-resize",br:"nw-resize",cl:"e-resize",ct:"s-resize",cr:"w-resize",cb:"n-resize"},this.colors=s,this.c.lineWidth=h,window.addEventListener("resize",this.resize)}styles(t,i){Object.keys(i).forEach(s=>t.style[s]=i[s])}cursor(t){this.container.style.cursor=t}addMainRect(){this.c.beginPath(),this.c.rect(this.x,this.y,this.width,this.ratio?this.height:this.height),this.c.strokeStyle=this.colors?.rect||"#f4f4f4",this.c.stroke(),this.c.beginPath()}addResizer(t){let i=0,s=0,h=0,e=0,o=this.pointSize,r=this.pointSize;switch(t){case"tl":i=h=this.x-this.pointSize/2,s=e=this.y-this.pointSize/2,o=this.pointSize,r=this.pointSize;break;case"tr":i=h=this.x+this.width-this.pointSize/2,s=e=this.y-this.pointSize/2,o=this.pointSize,r=this.pointSize;break;case"bl":i=h=this.x-this.pointSize/2,s=e=this.y+this.height-this.pointSize/2,o=this.pointSize,r=this.pointSize;break;case"br":i=h=this.x+this.width-this.pointSize/2,s=e=this.y+this.height-this.pointSize/2,o=this.pointSize,r=this.pointSize;break;case"cl":i=h=this.x-this.pointSize/2,s=this.y+this.pointSize/2,e=this.y+this.height/2-this.pointSize/2,r=this.height-this.pointSize;break;case"ct":i=this.x+this.pointSize/2,h=this.x+this.width/2-this.pointSize/2,s=e=this.y-this.pointSize/2,o=this.width-this.pointSize;break;case"cr":i=h=this.x+this.width-this.pointSize/2,s=this.y+this.pointSize/2,e=this.y+this.height/2-this.pointSize/2,r=this.height-this.pointSize;break;case"cb":i=this.x+this.pointSize/2,s=e=this.y+this.height-this.pointSize/2,o=this.width-this.pointSize,h=this.x+this.width/2-this.pointSize/2;break;default:break}this.resizers[t]={x:i,y:s,width:o,height:r},this.c.rect(h,e,this.pointSize,this.pointSize)}getHeight(t,i){const s=t/Math.sqrt(Math.pow(i,2));return Math.round(s)}getWidth(t,i){const s=t/Math.sqrt(1/Math.pow(i,2));return Math.round(s)}selector(){if(this.addMainRect(),this.sides.forEach(t=>{this.addResizer(t)}),!this.colors?.resizersFill&&!this.colors?.resizersStroke){this.c.fillStyle="#ccc",this.c.fill();return}this.colors?.resizersFill&&(this.c.fillStyle=this.colors?.resizersFill,this.c.fill()),this.colors?.resizersStroke&&(this.c.strokeStyle=this.colors?.resizersStroke,this.c.stroke())}detectSelectedPointSide(){let t=[];for(let e in this.resizers)t.push({...this.resizers[e],side:e});const h=t.sort((e,o)=>e.x-o.x).sort((e,o)=>e.y-o.y).map((e,o)=>(e.side=this.sides[o],e));this.resizers={},h.forEach(e=>{this.resizers[e.side]=e})}preventMoveOverflow(){const t=this.position.x-this.offset.x;t<0?this.position.x=this.offset.x:t+this.width>this.canvas.width&&(this.position.x=this.canvas.width-(this.width-this.offset.x));const i=this.position.y-this.offset.y;i<0?this.position.y=this.offset.y:i+this.height>this.canvas.height&&(this.position.y=this.canvas.height-(this.height-this.offset.y))}preventOverflow(){if(!this.selectedResizer&&!this.drawing&&!this.isUpdatingRatio){this.preventMoveOverflow();return}const t=this.position.x;t<0?this.position.x=0:t>this.canvas.width&&(this.position.x=this.canvas.width),this.position.y<0?this.position.y=0:this.position.y>this.canvas.height&&(this.position.y=this.canvas.height)}drawHandler(){this.x=this.offset.pureX,this.y=this.offset.pureY,this.ratio?(this.height+=this.position.y-(this.y+this.height),this.position.x>this.x&&this.position.y>this.y?this.width=this.getWidth(this.height,this.ratio):this.width=this.position.x>this.x||this.position.y>this.y?-this.getWidth(this.height,this.ratio):this.getWidth(this.height,this.ratio)):(this.width+=this.position.x-(this.x+this.width),this.height+=this.position.y-(this.y+this.height))}resizeHandler(){let t=0,i=0,s=0,h=0;switch(this.selectedResizer){case"tl":s=this.position.x-this.x,h=this.ratio?this.getHeight(s,this.ratio):this.position.y-this.y,t=-s,i=-h;break;case"tr":s=0,h=this.position.y-this.y,t=this.ratio?this.getWidth(-h,this.ratio):this.position.x-(this.x+this.width),i=-h;break;case"bl":s=this.position.x-this.x,h=0,t=-s,i=this.ratio?this.getHeight(t,this.ratio):this.position.y-(this.y+this.height);break;case"br":t=this.position.x-(this.x+this.width),i=this.ratio?this.getHeight(t,this.ratio):this.position.y-(this.y+this.height);break;case"cl":s=this.position.x-this.x,t=-s,this.ratio&&(i=this.getHeight(t,this.ratio),h=-i/2);break;case"ct":h=this.position.y-this.y,i=-h,this.ratio&&(t=this.getWidth(i,this.ratio),s=-t/2);break;case"cr":t=this.position.x-(this.x+this.width),this.ratio&&(i=this.getHeight(t,this.ratio),h=-i/2);break;case"cb":i=this.position.y-(this.y+this.height),this.ratio&&(t=this.getWidth(i,this.ratio),s=-t/2);break;default:t=0,i=0;break}this.x+=s,this.y+=h,this.width+=t,this.height+=i}update(t){this.c.clearRect(0,0,this.canvas.width,this.canvas.height),this.preventOverflow(),this.selectedResizer?this.resizeHandler():this.drawing?this.drawHandler():t||(this.y=this.position.y-this.offset.y,this.x=this.position.x-this.offset.x),this.selector(),this.detectSelectedPointSide()}recHit(t,i){if(i.width<0){if(i.height<0){if(t.offsetX>=i.x&&t.offsetX<=i.x+Math.abs(i.width)&&t.offsetY>=i.y-Math.abs(i.height)&&t.offsetY<=i.y+Math.abs(i.height))return!0}else if(t.offsetX>=i.x-Math.abs(i.width)&&t.offsetX<=i.x&&t.offsetY>=i.y&&t.offsetY<=i.y+Math.abs(i.height))return!0}else if(i.height<0){if(t.offsetX>=i.x&&t.offsetX<=i.x+Math.abs(i.width)&&t.offsetY>=i.y-Math.abs(i.height)&&t.offsetY<=i.y+Math.abs(i.height))return!0}else if(t.offsetX>=i.x&&t.offsetX<=i.x+Math.abs(i.width)&&t.offsetY>=i.y&&t.offsetY<=i.y+Math.abs(i.height))return!0;return!1}addRemoveEvents(){window.removeEventListener("pointerup",this.mouseUp),window.removeEventListener("pointermove",this.mouseMove),window.addEventListener("pointerup",this.mouseUp),window.addEventListener("pointermove",this.mouseMove)}mouseDown(t){this.offset={x:t.offsetX-this.x,y:t.offsetY-this.y,pureX:t.offsetX,pureY:t.offsetY};let i="crosshair";for(const s in this.resizers){if(this.recHit(t,this.resizers[s])){switch(s){case"tl":i=this.cursors.tl;break;case"tr":i=this.cursors.tr;break;case"bl":i=this.cursors.bl;break;case"br":i=this.cursors.br;break;case"cl":i=this.cursors.cl;break;case"ct":i=this.cursors.ct;break;case"cr":i=this.cursors.cr;break;case"cb":i=this.cursors.cb;break;default:break}this.selectedResizer=s,window.addEventListener("pointerup",this.mouseUp),window.addEventListener("pointermove",this.mouseMove)}this.cursor(i)}this.recHit(t,this)?(i="move",this.addRemoveEvents()):this.selectedResizer||(this.addRemoveEvents(),this.drawing=!0)}mouseMove(t){const i=this.canvas?.getBoundingClientRect();this.position={x:t.target===this.canvas?t.offsetX:t.offsetX-i.x,y:t.target===this.canvas?t.offsetY:t.offsetY-i.y},this.update(),this.callback&&this.callback(this.outPut())}mouseUp(){this.selectedResizer=null,this.drawing=!1,this.cursor("crosshair"),this.x=this.resizers.tl.x+this.pointSize/2,this.y=this.resizers.tl.y+this.pointSize/2,this.width=Math.abs(this.width),this.height=Math.abs(this.height),window.removeEventListener("pointerup",this.mouseUp),window.removeEventListener("pointermove",this.mouseMove),this.detectSelectedPointSide(),this.selector()}hoverCursor(t){let i="crosshair";this.recHit(t,this)&&(i="move");for(const s in this.resizers)if(this.recHit(t,this.resizers[s]))switch(s){case"tl":i=this.cursors.tl;break;case"tr":i=this.cursors.tr;break;case"bl":i=this.cursors.bl;break;case"br":i=this.cursors.br;break;case"cl":i=this.cursors.cl;break;case"ct":i=this.cursors.ct;break;case"cr":i=this.cursors.cr;break;case"cb":i=this.cursors.cb;break;default:break}this.cursor(i)}outPut(){let t,i,s,h;return this.width<0?(t=this.x-Math.abs(this.width),i=this.y):(t=this.x,i=this.y),this.height<0&&(i=this.y-Math.abs(this.height)),s=Math.abs(this.width),h=Math.abs(this.height),t=t+this.canvas.getBoundingClientRect().left,i=i+this.canvas.getBoundingClientRect().top,{x:t,y:i,width:s,height:h}}setAspect(t){switch(t.key){case"1":this.ratio=16/9,this.height=this.getHeight(this.width,this.ratio);break;case"2":this.ratio=9/16,this.height=this.getHeight(this.width,this.ratio);break;case"3":this.ratio=1/1,this.height=this.getHeight(this.width,this.ratio);break;case"4":this.ratio=null;break;default:this.ratio=null;break}this.update(!0)}resize(){this.containerInfo=this.container.getBoundingClientRect(),this.canvas.width=this.containerInfo.width,this.canvas.height=this.containerInfo.height;const t=()=>this.callback&&this.callback(this.outPut());this.width>this.containerInfo.width&&(this.width=this.containerInfo.width,t()),this.height>this.containerInfo.height&&(this.height=this.containerInfo.height,t()),this.update()}init(t){this.update(),this.container.addEventListener("pointerdown",this.mouseDown),window.addEventListener("mousemove",this.hoverCursor),window.addEventListener("keydown",i=>this.setAspect(i,this)),this.callback=t,this.callback&&this.callback(this.outPut())}}export default c;
